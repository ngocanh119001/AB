services:
  # read:
  #   image: grafana/loki:latest
  #   command: "-config.file=/etc/loki/config.yaml -target=read"
  #   ports:
  #     - 3101:3100
  #     - 7946
  #     - 9095
  #   volumes:
  #     - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
  #   depends_on:
  #     - minio
  #   healthcheck:
  #     test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   extends:
  #     file: common-config.yml
  #     service: network-deploy-service

  # write:
  #   image: grafana/loki:latest
  #   command: "-config.file=/etc/loki/config.yaml -target=write"
  #   ports:
  #     - 3102:3100
  #     - 7946
  #     - 9095
  #   volumes:
  #     - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
  #   healthcheck:
  #     test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   depends_on:
  #     - minio
  #   extends:
  #     file: common-config.yml
  #     service: network-deploy-service

  # alloy:
  #   image: grafana/alloy:latest
  #   volumes:
  #     - ./observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   command:  run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
  #   ports:
  #     - 12345:12345
  #   depends_on:
  #     - gateway
  #   extends:
  #     file: common-config.yml
  #     service: network-deploy-service

  # minio:
  #   image: minio/minio
  #   entrypoint:
  #     - sh
  #     - -euc
  #     - |
  #       mkdir -p /data/loki-data && \
  #       mkdir -p /data/loki-ruler && \
  #       minio server /data
  #   environment:
  #     - MINIO_ROOT_USER=loki
  #     - MINIO_ROOT_PASSWORD=supersecret
  #     - MINIO_PROMETHEUS_AUTH_TYPE=public
  #     - MINIO_UPDATE=off
  #   ports:
  #     - 9000
  #   volumes:
  #     - ./.data/minio:/data
  #   healthcheck:
  #     test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
  #     interval: 15s
  #     timeout: 20s
  #     retries: 5
  #   extends:
  #     file: common-config.yml
  #     service: network-deploy-service
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #   extends:
  #     file: common-config.yml
  #     service: network-deploy-service
  # tempo:
  #   image: grafana/tempo:latest
  #   container_name: tempo
  #   command: "-config.file=/etc/tempo/config.yaml"
  #   ports:
  #     - "4318:4318"
  #     - "3110:3100"
  #   volumes:
  #     - ./observability/tempo/tempo.yml:/etc/tempo/config.yaml
  #   extends:
  #     file: common-config.yml
  #     service: network-deploy-service
  #   healthcheck:
  #     test: ["CMD", "wget", "-q", "--spider", "http://localhost:4318"]
  #     interval: 10s
  #     retries: 5
  #     timeout: 5s

  # grafana:
  #   image: grafana/grafana:latest
  #   environment:
  #     - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
  #     - GF_AUTH_ANONYMOUS_ENABLED=true
  #     - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
  #   depends_on:
  #     - gateway
  #   entrypoint:
  #     - sh
  #     - -euc
  #     - |
  #       /run.sh
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
  #   healthcheck:
  #     test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   extends:
  #     file: common-config.yml
  #     service: network-deploy-service

  # backend:
  #   image: grafana/loki:latest
  #   volumes:
  #     - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
  #   ports:
  #     - "3100"
  #     - "7946"
  #   command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
  #   depends_on:
  #     - gateway
  #   extends:
  #     file: common-config.yml
  #     service: network-deploy-service

  # gateway:
  #   image: nginx:latest
  #   depends_on:
  #     - read
  #     - write
  #   entrypoint:
  #     - sh
  #     - -euc
  #     - |
  #       cat <<EOF > /etc/nginx/nginx.conf
  #       user  nginx;
  #       worker_processes  5;  ## Default: 1

  #       events {
  #         worker_connections   1000;
  #       }

  #       http {
  #         resolver 127.0.0.11;

  #         server {
  #           listen             3100;

  #           location = / {
  #             return 200 'OK';
  #             auth_basic off;
  #           }

  #           location = /api/prom/push {
  #             proxy_pass       http://write:3100\$$request_uri;
  #           }

  #           location = /api/prom/tail {
  #             proxy_pass       http://read:3100\$$request_uri;
  #             proxy_set_header Upgrade \$$http_upgrade;
  #             proxy_set_header Connection "upgrade";
  #           }

  #           location ~ /api/prom/.* {
  #             proxy_pass       http://read:3100\$$request_uri;
  #           }

  #           location = /loki/api/v1/push {
  #             proxy_pass       http://write:3100\$$request_uri;
  #           }

  #           location = /loki/api/v1/tail {
  #             proxy_pass       http://read:3100\$$request_uri;
  #             proxy_set_header Upgrade \$$http_upgrade;
  #             proxy_set_header Connection "upgrade";
  #           }

  #           location ~ /loki/api/.* {
  #             proxy_pass       http://read:3100\$$request_uri;
  #           }
  #         }
  #       }
  #       EOF
  #       /docker-entrypoint.sh nginx -g "daemon off;"
  #   ports:
  #     - "3100:3100"
  #   healthcheck:
  #     test: ["CMD", "service", "nginx", "status"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   extends:
  #     file: common-config.yml
  #     service: network-deploy-service
  # keycloak:
  #   image: hegoplay/keycloak
  #   command:
  #     - start-dev
  #     - --import-realm
  #   environment:
  #     KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
  #     KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
  #     KC_HEALTH_ENABLED: true
  #     KC_METRICS_ENABLED: true
  #     DB_VENDOR: h2
  #     # OTEL_SERVICE_NAME: "keycloak"
  #     # KC_FEATURES: health
  #   healthcheck:
  #     test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:9000/health/live']
  #     interval: 5s
  #     timeout: 5s
  #     retries: 30
  #     start_period: 10s
  #   extends:
  #     file: common-config.yml
  #     service: network-deploy-service

  #   ports:
  #     - "8080:8080"
  # mysql:
  #   image: mysql:9.2.0
  #   environment:
  #     MYSQL_ROOT_PASSWORD: root
  #   volumes:
  #     - ../services/mysql:/docker-entrypoint-initdb.d
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "--password=$MYSQL_ROOT_PASSWORD"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 30
  #     start_period: 10s
  #   ports:
  #     - "3306:3306"
  #   extends:
  #     file: common-config.yml
  #     service: network-deploy-service
  # test-service:
  #   build:
  #     context: ../services/demo-keycloak
  #     dockerfile: Dockerfile
  #   image: hegoplay/test-service
  #   environment:
  #     SERVER_PORT: 8180
  #     JWK-URI: http://keycloak:8080/realms/test-keycloak-security/protocol/openid-connect/certs
  #     OTEL_SERVICE_NAME: "configserver"
  #   depends_on:
  #     keycloak:
  #       condition: service_healthy
  #   ports:
  #     - "8180:8180"
  #   extends:
  #     file: common-config.yml
  #     service: microservice-base-config
  rabbitmq:
    image: rabbitmq:4.1.0-management
    container_name: rabbitmq-container
    extends:
      file: common-config.yml
      service: network-deploy-service
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:7.4.3-alpine
    container_name: redis-container
    extends:
      file: common-config.yml
      service: network-deploy-service
    ports:
      - "6379:6379"
    volumes:
      - ./db-volume/redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
  keycloak-server:
    container_name: user-keycloak
    extends:
      file: common-config.yml
      service: network-deploy-service
    image: keycloak/keycloak:26.2
    ports:
      - "8180:8180"
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_HTTP_ENABLED: true
      KC_HTTP_PORT: 8180
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: guest
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    healthcheck:
      test:
        [
          "CMD-SHELL",
          '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:9000/health/live',
        ]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s
    volumes:
      - ./keycloak/keycloak-realm/:/opt/keycloak/data/import/
      - ./keycloak/keycloak-data:/opt/keycloak/data
      - ./keycloak/keycloak-providers:/opt/keycloak/providers
    command: ["start-dev", "--import-realm"]

  product-mongo-db:
    container_name: product-mongo-db
    extends:
      file: common-config.yml
      service: network-deploy-service
    image: mongo
    ports:
      - "27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    volumes:
      - ./db-volume/product-mongo-data:/data/db
  review-mongo-db:
    container_name: review-mongo-db
    extends:
      file: common-config.yml
      service: network-deploy-service
    image: mongo
    ports:
      - "27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    volumes:
      - ./db-volume/review-mongo-data:/data/db
  voucher-mongo-db:
    container_name: voucher-mongo-db-review
    extends:
      file: common-config.yml
      service: network-deploy-service
    image: mongo
    ports:
      - "27017"
    volumes:
      - ./db-volume/voucher-mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
  cart-mongo-db:
    container_name: cart-mongo-db-review
    extends:
      file: common-config.yml
      service: network-deploy-service
    image: mongo
    ports:
      - "27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    volumes:
      - ./db-volume/cart-mongo-data:/data/db
  order-mysql-db:
    container_name: order-mysql-db-review
    extends:
      file: common-config.yml
      service: network-deploy-service
    image: mysql:9.3.0
    ports:
      - "3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: order-service
      MYSQL_USER: username
      MYSQL_PASSWORD: password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    volumes:
      - ./schema/order/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./db-volume/order-mysql-data:/var/lib/mysql
  user-mongo-db:
    container_name: user-mongo-db-review
    extends:
      file: common-config.yml
      service: network-deploy-service
    image: mongo
    ports:
      - "27017"
    volumes:
      - ./db-volume/user-mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  eureka-server:
    container_name: eureka-server
    extends:
      file: common-config.yml
      service: eureka-client-microservice-config
    build:
      context: ../services/eureka-server
      dockerfile: Dockerfile
    healthcheck:
      test:
        [
          "CMD-SHELL",
          '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8761/actuator/health',
        ]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s
    ports:
      - "8761:8761"

  config-server:
    container_name: config-server
    build:
      context: ../services/config-server
      dockerfile: Dockerfile
    extends:
      file: common-config.yml
      service: network-deploy-service
    ports:
      - "8888:8888"
    environment:
      SPRING_CLOUD_CONFIG_SERVER_GIT_PASSWORD: ${GIT_PASSWORD}
      SPRING_CLOUD_CONFIG_SERVER_GIT_USERNAME: ${GIT_USERNAME}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8888/health/live',
        ]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s

  spring-cloud-gateway:
    depends_on:
      eureka-server:
        condition: service_healthy
        restart: true
      keycloak-server:
        condition: service_healthy
        restart: true

    build:
      context: ../services/gateway
      dockerfile: Dockerfile
    extends:
      file: common-config.yml
      service: eureka-client-microservice-config
    healthcheck:
      test:
        [
          "CMD-SHELL",
          '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8080/actuator/health',
        ]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s
    environment:
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: ${RESOURCESERVER_JWT_ISSUER_URL}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak-server:8180/realms/demo/protocol/openid-connect/certs
    ports:
      - "8080:8080"

  user-service:
    depends_on:
      spring-cloud-gateway:
        condition: service_healthy
        restart: true
      user-mongo-db:
        condition: service_healthy
        restart: true
      config-server:
        condition: service_healthy
        restart: true

    build:
      context: ../services/user-service
      dockerfile: Dockerfile
    extends:
      file: common-config.yml
      service: config-client-microservice-config
    healthcheck:
      test:
        [
          "CMD-SHELL",
          '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8002/actuator/health',
        ]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s
    ports:
      - "8002:8002"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://user-mongo-db:27017/user-service
      # OTEL_SERVICE_NAME: "user-service"
      SPRING_DATA_MONGODB_DATABASE: user-service
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: ${RESOURCESERVER_JWT_ISSUER_URL}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak-server:8180/realms/demo/protocol/openid-connect/certs
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      KEYCLOAK_ADMIN_URL: http://keycloak-server:8180
      KEYCLOAK_ADMIN_REALM: demo
      KEYCLOAK_ADMIN_USERNAME: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_REALM: master
      KEYCLOAK_CLIENT_ID: admin-cli

  product-service:
    depends_on:
      spring-cloud-gateway:
        condition: service_healthy
        restart: true
      product-mongo-db:
        condition: service_healthy
        restart: true
      config-server:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true

    build:
      context: ../services/product-service
      dockerfile: Dockerfile
    extends:
      file: common-config.yml
      service: config-client-microservice-config
    healthcheck:
      test:
        [
          "CMD-SHELL",
          '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8000/actuator/health',
        ]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s
    ports:
      - "8000"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://product-mongo-db:27017/product-service
      # OTEL_SERVICE_NAME: "product-service"
      SPRING_DATA_MONGODB_DATABASE: product-service
      # SPRING_CONFIG_IMPORT: configserver:http://config-server:8888
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
  review-service:
    depends_on:
      user-service:
        condition: service_healthy
        restart: true
      review-mongo-db:
        condition: service_healthy
        restart: true

    build:
      context: ../services/review-service
      dockerfile: Dockerfile
    extends:
      file: common-config.yml
      service: config-client-microservice-config
    healthcheck:
      test:
        [
          "CMD-SHELL",
          '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8001/actuator/health',
        ]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s
    ports:
      - "8001"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://review-mongo-db:27017/review-service
      # OTEL_SERVICE_NAME: "review-service"
      SPRING_DATA_MONGODB_DATABASE: review-service
      SPRING_CONFIG_IMPORT: configserver:http://config-server:8888
  cart-service:
    depends_on:
      spring-cloud-gateway:
        condition: service_healthy
        restart: true
      cart-mongo-db:
        condition: service_healthy
        restart: true
      config-server:
        condition: service_healthy
        restart: true

    build:
      context: ../services/cart-service
      dockerfile: Dockerfile
    extends:
      file: common-config.yml
      service: config-client-microservice-config
    healthcheck:
      test:
        [
          "CMD-SHELL",
          '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8003/actuator/health',
        ]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s
    ports:
      - "8003"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://cart-mongo-db:27017/cart-service
      # OTEL_SERVICE_NAME: "cart-service"
      SPRING_DATA_MONGODB_DATABASE: cart-service
      SPRING_CONFIG_IMPORT: configserver:http://config-server:8888

  payment-service:
    depends_on:
      spring-cloud-gateway:
        condition: service_healthy
        restart: true
      config-server:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
      rabbitmq:
        condition: service_healthy
        restart: true

    build:
      context: ../services/payment-service
      dockerfile: Dockerfile
    extends:
      file: common-config.yml
      service: config-client-microservice-config
    healthcheck:
      test:
        [
          "CMD-SHELL",
          '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8070/actuator/health',
        ]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s
    ports:
      - "8070"
    environment:
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      # OTEL_SERVICE_NAME: "payment-service"

  order-service:
    depends_on:
      order-mysql-db:
        condition: service_healthy
        restart: true
      product-service:
        condition: service_healthy
        restart: true
      payment-service:
        condition: service_healthy
        restart: true
      voucher-service:
        condition: service_healthy
        restart: true
      user-service:
        condition: service_healthy
        restart: true

    build:
      context: ../services/order-service
      dockerfile: Dockerfile
    extends:
      file: common-config.yml
      service: config-client-microservice-config
    healthcheck:
      test:
        [
          "CMD-SHELL",
          '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8004/actuator/health',
        ]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s
    ports:
      - "8004"
    environment:
      SPRING_R2DBC_URL: r2dbc:mysql://order-mysql-db:3306/order-service
      SPRING_R2DBC_USERNAME: root
      SPRING_R2DBC_PASSWORD: root
      # OTEL_SERVICE_NAME: "order-service"
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672

  voucher-service:
    depends_on:
      voucher-mongo-db:
        condition: service_healthy
        restart: true
      spring-cloud-gateway:
        condition: service_healthy
        restart: true
      config-server:
        condition: service_healthy
        restart: true

    build:
      context: ../services/voucher-service
      dockerfile: Dockerfile
    extends:
      file: common-config.yml
      service: microservice-base-config
    healthcheck:
      test:
        [
          "CMD-SHELL",
          '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8005/actuator/health',
        ]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s
    ports:
      - "8005"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://voucher-mongo-db:27017/voucher-service
      # OTEL_SERVICE_NAME: "cart-service"
      SPRING_DATA_MONGODB_DATABASE: voucher-service
      # OTEL_SERVICE_NAME: "order-service"
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379

  print-order-service:
    depends_on:
      order-service:
        condition: service_healthy
        restart: true

    build:
      context: ../services/printer-service
      dockerfile: Dockerfile
    extends:
      file: common-config.yml
      service: microservice-base-config
    healthcheck:
      test:
        [
          "CMD-SHELL",
          '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8006/actuator/health',
        ]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s
    ports:
      - "8006"
    environment:
      EUREKA_HOST: eureka-server
      EUREKA_PORT: 8761
      PORT: 8006
      HOST_ACCESSIBLE_HOSTNAME: localhost
      SERVICE_NAME: printer-service
networks:
  e-commerce:
    driver: bridge
