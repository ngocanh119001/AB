services:
  
  product-mongo-db:
    container_name: product-mongo-db-review
    extends:
      file: common-config.yml
      service: network-deploy-service
    image: mongo
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
  # review-mongo-db:
  #   container_name: review-mongo-db-review
  #   extends:
  #     file: common-config.yml
  #     service: network-deploy-service
  #   image: mongo
  #   ports:
  #     - "27018:27017"
  #   healthcheck:
  #     test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 5s
  # cart-mongo-db:
  #   container_name: cart-mongo-db-review
  #   extends:
  #     file: common-config.yml
  #     service: network-deploy-service
  #   image: mongo
  #   ports:
  #     - "27019:27017"
  #   healthcheck:
  #     test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 5s
  # order-mysql-db:
  #   container_name: order-mysql-db-review
  #   extends:
  #     file: common-config.yml
  #     service: network-deploy-service
  #   image: mysql:9.3.0
  #   ports:
  #     - "3306:3306"
  #   environment:
  #     MYSQL_ROOT_PASSWORD: root
  #     MYSQL_DATABASE: order-service
  #     MYSQL_USER: username
  #     MYSQL_PASSWORD: password
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 5s
  #   volumes:
  #     - ./schema/order/init.sql:/docker-entrypoint-initdb.d/init.sql
  # voucher-mongodb:
  #   container_name: voucher-mongo-db-review
  #   extends:
  #     file: common-config.yml
  #     service: network-deploy-service
  #   image: mongo
  #   ports:
  #     - "27020:27017"
  #   healthcheck:
  #     test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 5s
  user-mongo-db:
    container_name: user-mongo-db-review
    extends:
      file: common-config.yml
      service: network-deploy-service
    image: mongo
    ports:
      - "27021:27017"
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
  rabbitmq:
    image: rabbitmq:4.1.0-management
    extends:
      file: common-config.yml
      service: network-deploy-service
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:7.4.3-alpine
    container_name: redis-container
    networks:
      - e-commerce
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
  keycloak:
    container_name: user-keycloak-review
    extends:
      file: common-config.yml
      service: network-deploy-service
    image: keycloak/keycloak:26.2
    ports:
      - "8180:8180"
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_HTTP_ENABLED: true
      KC_HTTP_PORT: 8180
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: guest
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8180/auth/realms/master"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./keycloak/keycloak-realm/:/opt/keycloak/data/import/
      - ./keycloak/keycloak-data:/opt/keycloak/data
      - ./keycloak/keycloak-providers:/opt/keycloak/providers
    command: ["start-dev", "--import-realm"]
networks:
  e-commerce:
    driver: bridge
