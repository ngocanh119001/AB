const mongoose = require("mongoose");
const Product = require("./models/Product");

// S·ª≠a ch·ªó n√†y: d√πng 'mongodb' thay v√¨ 'localhost', c·ªïng 27017
const MONGODB_URI = "mongodb://admin:password@mongodb:27017/mydb?authSource=admin";

async function seedDatabase() {
  try {
    await mongoose.connect(MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log("‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng t·ªõi MongoDB");

    await Product.deleteMany({});
    console.log("üßπ ƒê√£ d·ªçn s·∫°ch d·ªØ li·ªáu c≈©");

    const sampleProducts = [
      {
        name: "iPhone 15 Pro",
        description: "ƒêi·ªán tho·∫°i flagship c·ªßa Apple",
        unit: "c√°i",
        quantity: 10,
        price: 25000000,
        imgurl: "https://example.com/iphone.jpg"
      },
      {
        name: "MacBook Pro M2",
        description: "Laptop cao c·∫•p 16-inch",
        unit: "c√°i",
        quantity: 5,
        price: 45000000,
        imgurl: "https://example.com/macbook.jpg"
      },
      {
        name: "AirPods Pro 2",
        description: "Tai nghe kh√¥ng d√¢y ch·ªëng ·ªìn",
        unit: "c√°i",
        quantity: 20,
        price: 6000000,
        imgurl: "https://example.com/airpods.jpg"
      }
    ];

    const createdProducts = await Product.insertMany(sampleProducts);
    console.log(`üå± ƒê√£ th√™m th√†nh c√¥ng ${createdProducts.length} s·∫£n ph·∫©m`);

  } catch (error) {
    console.error("‚ùå L·ªói trong qu√° tr√¨nh seed d·ªØ li·ªáu:", error);
  } finally {
    await mongoose.disconnect();
    console.log("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB");
  }
}

seedDatabase();
